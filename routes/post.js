const express = require("express")
const router = express.Router()
const mongoose = require('mongoose')
const Post = mongoose.model("Post")
const Answer = mongoose.model("Answer")
const {telebot, } = require('../bots/telegram')
const checkToken = require('../middleware/checkToken')
const onlyAdminsRoute = require('../middleware/onlyAdminsRoute')

//routes for any users
router.post('/user/createpost', checkToken, async function (req, res) {
    try {
        const {id} = req.user
        const post = new Post(req.body)
        post.creator_id = id
        await post.save()
        telebot.sendMessage('@inv777', `üìù#–ù–æ–≤–∞—è–ó–∞—è–≤–∫–∞\n–û–±—ä–µ–∫—Ç: ${req.body.object}\n–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!`)
        res.json({message: "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"})
    } catch (err) {
        res.json({message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'})
    }
})

router.get('/user/allpublished', async function (req, res) {
    const posts = await Post.find({status: ["–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ ", "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç"]})
    res.json({posts})
})

router.post('/user/post', async function (req, res) {
    const {id} = req.body
    const post = await Post.find({id})
    res.json({post})
})

router.post('/user/newanswer', checkToken, async function (req,res) {
    try {
        const {amount, rate, period, post_id} = req.body
        const answer = new Answer(req.body)
        await answer.save()
        const post = await Post.findOne({id: post_id, status: '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤'})
        if (post) {
            Post.updateOne( {id: post_id}, {$set: {status: '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç'}})
        }
        telebot.sendMessage('@inv777', `üì¨#–ù–æ–≤—ã–π–û—Ç–≤–µ—Ç\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ: https://investapp.vercel.app/post/${post_id}\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—É–º–º–∞: ${amount}\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: ${rate}\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Å—Ä–æ–∫: ${period}\n–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!`)
        res.json({message: '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'})
    } catch (err) {
        return res.json({message: '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'})
    }
})

router.post('/user/getposts', async function (req, res) {
    const {creator_id} = req.body
    const answers = await Answer.find({creator_id})
    const posts = await Post.find({creator_id})
    res.json({posts, answers})
})

router.post('/user/updatepost', checkToken, async function (req, res) {
    try {
        const {id} = req.body
        // –ü—Ä–æ–≤–µ—Ä–∫–∞. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
        const post = await Post.findOne({id})
        if (post.creator_id !== req.user.id) return res.status(503).json({message: 'Forbidden'})
        //
        await Post.updateOne({id}, {$set: req.body})
        res.json({message: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞"})
    } catch (err) {
        res.status(520).json({message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"})
    }
})

router.post('/user/answers', async function (req, res) {
    const {investor_id} = req.body
    const answers = await Answer.find({investor_id: investor_id})
    res.json({answers})
})

router.post('/user/answer-changestatus', checkToken, async function (req, res) {
    try {
        const {id, status} = req.body
        // –ü—Ä–æ–≤–µ—Ä–∫–∞. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
        const answer = await Answer.findOne({id})
        if (answer.creator_id !== req.user.id) return res.status(503).json({message: 'Forbidden'})
        //
        await Answer.updateOne({id}, {$set: {status}})
        res.json({message: "–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"})
    } catch (err) {
        res.status(520).json({message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"})
    }
})

//admin routes

router.post('/admin/updatepost', checkToken, async function (req, res) {
    try {
        const {id} = req.body
        await Post.updateOne({id}, {$set: req.body})
    } catch (err) {
        res.status(520).json({message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"})
    }
    // if (req.body.status === '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤') {
    //     const users = User.find({telegram_notify: 'available', fmin_amount: { $gt: req.body.amount }, fmax_amount: {$gt: req.body.amount * -1}})
    //     for (user in users) {
    //         console.log(users[user])
    //         telebot.sendMessage(users[user].telegram_login, `–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! https://investapp.vercel.app/post/${id}`)
    //     }
    // }
})

router.get('/admin/allposts', checkToken, onlyAdminsRoute, async function (req, res) {
    const answers = await Answer.find({})
    const posts = await Post.find({})
    res.json({posts, answers})
})


module.exports = router
